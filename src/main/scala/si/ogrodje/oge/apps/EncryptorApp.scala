package si.ogrodje.oge.apps

import cats.data.NonEmptyList
import cats.effect.IO.{fromEither, fromOption, fromTry}
import cats.effect.{ExitCode, IO, IOApp, Resource}
import fs2.Stream
import io.circe.*
import io.circe.generic.auto.*
import io.circe.syntax.*
import si.ogrodje.oge.subs.{Subscriber, SubscriptionKind}

import java.io.InputStreamReader
import java.nio.file.{Files, Path}
import scala.util.Try

object EncryptorApp extends IOApp:
  import si.ogrodje.oge.subs.SecretString.*
  import si.ogrodje.oge.subs.Subscriber.given

  type SubscriptionSecret = String
  override def run(args: List[String]): IO[ExitCode] = for {
    (rawSubscribersPath, encryptedSubscribersPath) <- IO.pure(
      Path.of("./subscribers-decrypted.yml") -> Path.of("./subscribers.yml")
    )
    subscriptionSecret                             <- readSubSecret
    decryptedSubscribers                           <- readDecryptedSubscribers(rawSubscribersPath)
    encryptedSubscribers                           <- encryptSubscribers(subscriptionSecret, decryptedSubscribers)
    _ <- writeEncryptedSubscribers(encryptedSubscribers, encryptedSubscribersPath).flatTap(path =>
      IO.println(s"Subscribers rewritten at ${path.toAbsolutePath}")
    )
  } yield ExitCode.Success

  private def readSubSecret: IO[SubscriptionSecret] =
    IO.envForIO
      .get("SUB_SECRET")
      .flatMap(fromOption(_)(new RuntimeException("SUB_SECRET environment variable is missing.")))

  private def readDecryptedSubscribers(
    path: Path = Path.of("./subscribers-decrypted.yml")
  ): IO[NonEmptyList[Subscriber]] =
    Resource
      .fromAutoCloseable(IO(Files.newInputStream(path)))
      .flatMap(is => Resource.fromAutoCloseable(IO(new InputStreamReader(is))))
      .use(reader => fromEither(yaml.v12.parser.parse(reader)))
      .flatMap(json => fromEither(json.as[List[Subscriber]]))
      .flatMap(list => fromTry(Try(NonEmptyList.fromListUnsafe(list))))

  private def encryptSubscribers(
    secret: SubscriptionSecret,
    subscribers: NonEmptyList[Subscriber]
  ): IO[Vector[Subscriber]] =
    Stream
      .emits(subscribers.toList)
      .evalMap { subscriber =>
        fromTry(subscriber.email.encrypt(secret)).map(encryptedMail => subscriber.copy(email = encryptedMail))
      }
      .compile
      .toVector

  private def writeEncryptedSubscribers(
    subscribers: Vector[Subscriber],
    path: Path = Path.of("./subscribers.yml")
  ): IO[Path] = IO {
    Files.write(
      path,
      ("# This file is autogenerated. Do not modify it by hand!\n" + yaml.v12.printer
        .pretty(subscribers.asJson))
        .getBytes()
    )
  }
